package club.tushar.tourplancost.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import club.tushar.tourplancost.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "TOUR".
 */
@Entity(active = true)
public class Tour {

    @Id(autoincrement = true)
    private Long id;

    @Unique
    private String name;
    private Long total;
    private Long startDate;
    private Long endDate;
    private String description;
    private Boolean synced;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TourDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "tourId")
    })
    @OrderBy("date DESC")
    private List<TourEventCost> TourTotalCost;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Tour() {
    }

    public Tour(Long id) {
        this.id = id;
    }

    @Generated
    public Tour(Long id, String name, Long total, Long startDate, Long endDate, String description, Boolean synced) {
        this.id = id;
        this.name = name;
        this.total = total;
        this.startDate = startDate;
        this.endDate = endDate;
        this.description = description;
        this.synced = synced;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTourDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getTotal() {
        return total;
    }

    public void setTotal(Long total) {
        this.total = total;
    }

    public Long getStartDate() {
        return startDate;
    }

    public void setStartDate(Long startDate) {
        this.startDate = startDate;
    }

    public Long getEndDate() {
        return endDate;
    }

    public void setEndDate(Long endDate) {
        this.endDate = endDate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Boolean getSynced() {
        return synced;
    }

    public void setSynced(Boolean synced) {
        this.synced = synced;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<TourEventCost> getTourTotalCost() {
        if (TourTotalCost == null) {
            __throwIfDetached();
            TourEventCostDao targetDao = daoSession.getTourEventCostDao();
            List<TourEventCost> TourTotalCostNew = targetDao._queryTour_TourTotalCost(id);
            synchronized (this) {
                if(TourTotalCost == null) {
                    TourTotalCost = TourTotalCostNew;
                }
            }
        }
        return TourTotalCost;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTourTotalCost() {
        TourTotalCost = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
